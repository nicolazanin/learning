
---GIT & GITHUB---

--inizializzare
-vai nella cartella che hai scelto
-dalla console scrivi, "change directory" 
        git cd (trascina la cartella così si genara il percorso)
-dalla console, crea i file nascosti.git
	git init

--comandi--
-dalla console, per vedere il percorso cartelle
	pwd
-dalla console, per uscire da un menu
 	q	in aggiunta anche : (prima)
-dalla console, vedere la lista di oggetti nella cartella in cui mi trovo
	ls
-dalla console, per vedere i file della cartella, a sta per all
	ls -a
-dalla console, per vedere i file della cartella, vedo tutte le info su quei file
	ls -all
-dalla console, aprire la cartella
	open
-per riferirmi ad una cartella superiore uso 
	..	
-per riferirmi ad una cartella in cui mi trovo
	.	
-per auto compilare si usa il comando tab, esempio: Des+tab --> Desktop/

-dalla console, vedere i file tracciati in verde, non tracciati in rosso
	git status
-dalla console,e copia file .gitignore
	echo "incolla testo" > .gitignore
-dalla cosole, e in cartella directory
	rm -r nomefile
-dalla console,aggiungere alla commit per avere la tracciabilità,dopo con git status saranno verdi
	git add . ---> con "." si intende tutta la cartella in cui ci si trova, in alternativa metti nomefile
		a questo punto i file attendono per andare nella repository
-dalla console, aggiunge alla repository
	git commit "initial commit"
-dalla console, dati porsonali
	git log
-dalla console, mostra le 'destinazioni' remote, origin è il nome del remote
	git remote
-dalla console, mostra anche l'url 
	git remote -v

--push repository--
--
solo quando si crea la destinazione remota su GITHUB
-dalla console
	'copia e incolla la roba su git hub'
--
-dalla console, step finale per aggiornare la destinazione finale su GITHUB
	git push -u origin master

--modifica file--
-git status -->rossi
-git add -->verdi
-git diff --staged --> vediamo la modifica che è stata effettuata ai file
-git commit -m "nomedellamodifica"
-git push -u origin master

--pull--
se faccio una modifica da github e la vogio aggiungere al pc 
-git pull

--branch--
-creare una nuova branch
	git branch <nomebranch>
-vedere che branch ci sono, a sta per all
	git branch -a
-selezionare una branch 
	git checkout <nomebranch>
a questo punto abbiamo creato una nuova branch e l'abbiamo selezionata da qui possiamo creare nuovi files modificarli ecc
senza cambiare quello che c'è nella maste branch
-eliminare la branch, tornare alla branch master
	git checkout master
-creare e andare nella nuova branch, b sta per branch
	git checkout -b <nomebranch>
-eliminare branch, D delete
	git branch -D <nomeb>
-merge delle branch, le branch si uniscono e si immettono nella master
-dalla master 
	git merge <nomeb>
-in caso di conflitto, ovvero quando vngono effettuate variazione nella master e il nostro merge tocca gli stessi parametri
bisogna modificare il file e proseguire con git add ., git commit, compare un menu e premi q, enter

--fork & pull request--
creare un duplicato della master branch e delle sue branch clicca su fork una volta entrato sulla repository desiderata, su 
github faccio il fork del progetto, lo modifico e poi eseguouna pull request ovvero notifico il proprietario del progetto delle
mie modifiche, vede le modifiche, se decide di accettarle premerà merge pull request
 
--eliminare repository su github--
icona impostazioni della repository e andare sotto su danger zone

--issues su github--
gli issues su github sono consigli degli utenti riguarto ad un file sulla tua reposiory.
il proprietario può chiudere un issue modificando il file e scrivendo nel commenti della commit fixes #numeroIssue
ogni cambiamento ha un suo hash code quindi ci si può riferire ad un cambiamento (intendo commit) incollando il codice nella issue
e github mostrerà automaticamente il cambimento

--clonare una repository su github --
-dopo aver creato una repository su git hub copiare il file https
-dalla console, clonerò la directory di github sul mio computer, mi devo posizionare dove voglio che quetsta venga clonata
	git clone https://ecc.git

	 

--https://rogerdudler.github.io/git-guide/index.it.html
Se vuoi in alternativa eliminare tutti i cambiamenti e commits fatti in locale,
recupera l'ultima versione dal server e fai puntare il tuo master branch a quella versione in questo modo
-git fetch origin
-git reset --hard origin/master






